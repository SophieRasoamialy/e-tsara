name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver-opts: image=moby/buildkit:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
      - name: Build modified Docker images
        run: |
          IMAGE_VERSION=${{ github.sha }}
          if git diff --name-only HEAD~1 HEAD | grep -q '^frontend/'; then
            docker-compose build frontend
            docker tag hasindrae/autograder-frontend:latest hasindrae/autograder-frontend:${IMAGE_VERSION}
            docker push hasindrae/autograder-frontend:${IMAGE_VERSION}
          fi
          if git diff --name-only HEAD~1 HEAD | grep -q '^backend/'; then
            docker-compose build backend
            docker tag hasindrae/autograder-backend:latest hasindrae/autograder-backend:${IMAGE_VERSION}
            docker push hasindrae/autograder-backend:${IMAGE_VERSION}
          fi
          if git diff --name-only HEAD~1 HEAD | grep -q '^flask/'; then
            docker-compose build flask
            docker tag hasindrae/evalpdfservice:latest hasindrae/evalpdfservice:${IMAGE_VERSION}
            docker push hasindrae/evalpdfservice:${IMAGE_VERSION}
          fi

      - name: Install AWS CLI
        run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1 
      - name: Install eksctl
        run: |
          curl --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s | tr '[:upper:]' '[:lower:]')_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name autograder
      - name: Check and Create Storage Resources
        run: |
          if ! kubectl get pv host-pv &>/dev/null; then kubectl apply -f host-pv.yaml; fi
          if ! kubectl get pvc host-pvc &>/dev/null; then kubectl apply -f host-pvc.yaml && kubectl wait --for=condition=Bound pvc/mongo-pvc --timeout=60s; fi
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f mongo-deployment.yaml
          kubectl apply -f nginx-configmap.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f flask-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl apply -f backend-service.yaml
          kubectl apply -f mongo-service.yaml
          kubectl apply -f flask-service.yaml
      - name: Update Deployments with new images
        run: |
          kubectl set image deployment/frontend-deployment frontend=hasindrae/autograder-frontend:${{ github.sha }}
          kubectl set image deployment/backend-deployment backend=hasindrae/autograder-backend:${{ github.sha }}
          kubectl set image deployment/flask-deployment flask=hasindrae/evalpdfservice:${{ github.sha }}
      - name: Get logs for debugging
        if: failure()
        run: kubectl logs -l app=autograder-backend