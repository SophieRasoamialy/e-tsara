name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Backend dependencies
      - name: Install Backend Dependencies
        run: npm ci
        working-directory: ./autograder-backend

      # Frontend dependencies
      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./autograder-frontend

      # Build Docker images
      - name: Build Docker images
        
        run: |
          docker-compose build
          # Utiliser le SHA du commit pour taguer l'image
          IMAGE_VERSION=${{ github.sha }}
          docker tag hasindrae/autograder-backend:latest hasindrae/autograder-backend:${IMAGE_VERSION}
          docker tag hasindrae/autograder-frontend:latest hasindrae/autograder-frontend:${IMAGE_VERSION}

      - name: Verify Docker images
        run: docker images

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Push Backend to Docker Hub  
      - name: Push Backend to Docker Hub
        run: docker push hasindrae/autograder-backend:${{ github.sha }}

      # Push Frontend to Docker Hub  
      - name: Push Frontend to Docker Hub
        run: docker push hasindrae/autograder-frontend:${{ github.sha }}

      - name: Install AWS CLI
        run: |
            sudo apt-get update
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update

      # Vérifier l'installation
      - name: Verify AWS CLI installation
        run: aws --version

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1 

      - name: Install eksctl
        run: |
          curl --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s | tr '[:upper:]' '[:lower:]')_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name autograder

      - name: Vérifier si le PV existe
        id: check_pv
        run: |
            kubectl get pv host-pv || echo "PV missing"
  
      - name: Appliquer le PV si manquant
        if: steps.check_pv.outputs.pv_missing
        run: kubectl apply -f host-pv.yaml
  
      - name: Vérifier si le PVC existe
        id: check_pvc
        run: |
            kubectl get pvc host-pvc || echo "PVC missing"
  
      - name: Appliquer le PVC si manquant
        if: steps.check_pvc.outputs.pvc_missing
        run: |
          kubectl apply -f host-pvc.yaml
          kubectl wait --for=condition=Bound pvc/mongo-pvc --timeout=60s

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f mongo-deployment.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl apply -f backend-service.yaml
          kubectl apply -f mongo-service.yaml
      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic backend-secrets --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }} --dry-run=client -o yaml | kubectl apply -f -
    
          
       # Déployer Ingress NGINX
      - name: Deploy Ingress NGINX
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
          

      - name: Update Kubernetes Deployment with new images
        run: |
          kubectl set image deployment/autograder-deployment frontend=hasindrae/autograder-frontend:${{ github.sha }} backend=hasindrae/autograder-backend:${{ github.sha }}

      - name: Check Pods Status
        run: kubectl get pods

      - name: Get logs for debugging
        if: failure()
        run: kubectl logs -l app=autograder-backend
